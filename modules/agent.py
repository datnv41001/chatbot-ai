# üìÅ modules/agent.py
# N∆°i ch·ª©a "b·ªô n√£o" c·ªßa AI Agent, k·∫øt h·ª£p LLM, Tools v√† Memory.

import os
from modules.langchain_timing_callback import TimingCallbackHandler
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.agents import AgentExecutor, create_react_agent
from langchain_community.cache import InMemoryCache
from langchain.globals import set_llm_cache
from dotenv import load_dotenv

# --- T·ªëi ∆∞u h√≥a: B·∫≠t LLM Caching ---
# ƒêi·ªÅu n√†y s·∫Ω l∆∞u tr·ªØ c√°c c·∫∑p (prompt, response) v√†o b·ªô nh·ªõ.
# N·∫øu LLM nh·∫≠n ƒë∆∞·ª£c c√πng m·ªôt prompt, n√≥ s·∫Ω tr·∫£ v·ªÅ k·∫øt qu·∫£ ƒë√£ l∆∞u thay v√¨ g·ªçi l·∫°i API.
set_llm_cache(InMemoryCache())
from langchain_core.prompts import PromptTemplate
from langchain.memory import ConversationSummaryBufferMemory

from modules.tools import (
    get_product_info, get_product_price, check_product_inventory,
    get_shipping_policy, get_payment_policy, get_return_policy,
    get_warranty_policy, get_promotions, get_opening_hours,
    get_contact_info, get_purchasing_guide, get_company_info,
    recommend_products
)

load_dotenv()
# 1. Kh·ªüi t·∫°o LLM ch√≠nh cho Agent
# - temperature=0.1 ƒë·ªÉ gi·∫£m t√≠nh ng·∫´u nhi√™n, gi√∫p Agent ho·∫°t ƒë·ªông nh·∫•t qu√°n h∆°n.
# - convert_system_message_to_human=True l√† tham s·ªë quan tr·ªçng ƒë·ªÉ t∆∞∆°ng th√≠ch t·ªët h∆°n v·ªõi model Gemini.
llm = ChatGoogleGenerativeAI(
    model="gemini-1.5-pro-latest", 
    temperature=0.1,
    google_api_key=os.getenv("GOOGLE_API_KEY"),
    callbacks=[TimingCallbackHandler()]
)

# 2. T·∫≠p h·ª£p t·∫•t c·∫£ c√°c c√¥ng c·ª• v√†o m·ªôt danh s√°ch
tools = [
    get_product_info,
    get_product_price,
    check_product_inventory,
    get_shipping_policy,
    get_payment_policy,
    get_return_policy,
    get_warranty_policy,
    get_promotions,
    get_opening_hours,
    get_contact_info,
    get_purchasing_guide,
    get_company_info,
    recommend_products
]

# 3. Thi·∫øt k·∫ø Prompt Template - "Linh h·ªìn" c·ªßa Agent
# ƒê√¢y l√† n∆°i ch√∫ng ta "d·∫°y" AI c√°ch h√†nh x·ª≠, suy nghƒ© v√† s·ª≠ d·ª•ng c√¥ng c·ª•.
agent_prompt_template = """
B·∫°n l√† DaiBoss AI, tr·ª£ l√Ω ·∫£o th√¢n thi·ªán c·ªßa c·ª≠a h√†ng v·∫≠t li·ªáu x√¢y d·ª±ng DaiBoss.
Nhi·ªám v·ª•: H·ªó tr·ª£ kh√°ch h√†ng ch√≠nh x√°c, ng·∫Øn g·ªçn, s·ª≠ d·ª•ng c√¥ng c·ª• ph√π h·ª£p khi c·∫ßn.

C√¥ng c·ª• kh·∫£ d·ª•ng: {tool_names}
{tools}

Quy tr√¨nh:
1. ƒê·ªçc k·ªπ c√¢u h·ªèi (`input`) v√† l·ªãch s·ª≠ chat g·∫ßn nh·∫•t (`chat_history`, ch·ªâ 3-5 l∆∞·ª£t g·∫ßn nh·∫•t).
2. N·∫øu tr·∫£ l·ªùi ƒë∆∞·ª£c t·ª´ ki·∫øn th·ª©c chung ho·∫∑c l·ªãch s·ª≠, h√£y tr·∫£ l·ªùi ngay (kh√¥ng c·∫ßn c√¥ng c·ª•).
3. N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ c√°c lo·∫°i s·∫£n ph·∫©m, s·∫£n ph·∫©m ph·ªï bi·∫øn, g·ª£i √Ω s·∫£n ph·∫©m, ƒë·ªÅ xu·∫•t s·∫£n ph·∫©m, t∆∞ v·∫•n ch·ªçn s·∫£n ph·∫©m, ho·∫∑c d√πng c√°c t·ª´ nh∆∞ "c√°c lo·∫°i", "g·ª£i √Ω", "n√™n mua g√¨", "lo·∫°i n√†o t·ªët"... th√¨ LU√îN ∆∞u ti√™n s·ª≠ d·ª•ng c√¥ng c·ª• recommend_products v·ªõi t·ª´ kh√≥a s·∫£n ph·∫©m ch√≠nh (v√≠ d·ª•: "g·∫°ch ceramic"). N·∫øu kh√¥ng ch·∫Øc t·ª´ kh√≥a, h√£y h·ªèi l·∫°i ng∆∞·ªùi d√πng ƒë·ªÉ x√°c ƒë·ªãnh s·∫£n ph·∫©m c·∫ßn g·ª£i √Ω.
4. N·∫øu c·∫ßn th√¥ng tin kh√°c, ch·ªçn ƒë√∫ng 1 c√¥ng c·ª• ph√π h·ª£p, format:
    Thought: [Suy nghƒ©]
    Action: [T√™n c√¥ng c·ª•]
    Action Input: [D·ªØ li·ªáu ƒë·∫ßu v√†o]
5. Khi ƒë·ªß th√¥ng tin, format:
    Thought: ƒê√£ ƒë·ªß th√¥ng tin.
    Final Answer: [Tr·∫£ l·ªùi ng·∫Øn g·ªçn, ti·∫øng Vi·ªát]

Gi·ªçng ƒëi·ªáu: Chuy√™n nghi·ªáp, th√¢n thi·ªán, ch·ªß ƒë·ªông.
Ch·ªâ tr·∫£ l·ªùi ƒë√∫ng tr·ªçng t√¢m, kh√¥ng lan man.

L·ªãch s·ª≠ h·ªôi tho·∫°i:
{chat_history}

C√ÇU H·ªéI C·ª¶A NG∆Ø·ªúI D√ôNG:
{input}

QU√Å TR√åNH SUY NGHƒ® C·ª¶A B·∫†N (bao g·ªìm `tool_names` v√† `agent_scratchpad`):
{agent_scratchpad}
"""

prompt = PromptTemplate.from_template(agent_prompt_template)

# 4. Kh·ªüi t·∫°o Agent
agent = create_react_agent(llm, tools, prompt)

# 5. T·∫°o Agent Executor v·ªõi Memory
# Memory cho ph√©p agent "nh·ªõ" c√°c cu·ªôc tr√≤ chuy·ªán tr∆∞·ªõc ƒë√≥.
memory = ConversationSummaryBufferMemory(
    llm=llm,
    max_token_limit=700,  # Gi·ªõi h·∫°n ƒë·ªô d√†i t√≥m t·∫Øt, ch·ªâ gi·ªØ 3-5 l∆∞·ª£t g·∫ßn nh·∫•t
    memory_key="chat_history",
    return_messages=True
)

agent_executor = AgentExecutor(
    agent=agent,
    tools=tools,  # C√≥ th·ªÉ ch·ªâ truy·ªÅn tool li√™n quan n·∫øu x√°c ƒë·ªãnh intent tr∆∞·ªõc ƒë√≥
    verbose=False,  # T·∫Øt log chi ti·∫øt khi ƒë√£ ·ªïn ƒë·ªãnh
    memory=memory,
    handle_parsing_errors=True,
    max_iterations=4  # Gi·ªõi h·∫°n s·ªë v√≤ng l·∫∑p ƒë·ªÉ tr√°nh agent loop v√¥ h·∫°n
)


