# üìÅ modules/tools.py
# N∆°i ch·ª©a t·∫•t c·∫£ c√°c c√¥ng c·ª• (tools) m√† AI Agent c√≥ th·ªÉ s·ª≠ d·ª•ng.

from langchain.tools import tool
from modules.vector_store import search_product_vector
from modules.quick_reply import get_quick_reply


@tool
def get_product_info(product_name: str) -> str:
    """S·ª≠ d·ª•ng c√¥ng c·ª• n√†y khi ng∆∞·ªùi d√πng h·ªèi th√¥ng tin chi ti·∫øt, m√¥ t·∫£, ho·∫∑c ƒë·∫∑c ƒëi·ªÉm c·ªßa m·ªôt s·∫£n ph·∫©m c·ª• th·ªÉ. 
    V√≠ d·ª•: 'g·∫°ch n√†y c√≥ ch·ªëng th·∫•m kh√¥ng?', 'm√¥ t·∫£ g·∫°ch b√≥ng ki·∫øng'.
    ƒê·∫ßu v√†o l√† t√™n s·∫£n ph·∫©m (product_name)."""
    return search_product_vector(product_name, field="info") or "T√¥i ch∆∞a t√¨m th·∫•y th√¥ng tin cho s·∫£n ph·∫©m n√†y."

@tool
def get_product_price(product_name: str) -> str:
    """S·ª≠ d·ª•ng c√¥ng c·ª• n√†y khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ gi√° c·ªßa m·ªôt s·∫£n ph·∫©m c·ª• th·ªÉ.
    V√≠ d·ª•: 'gi√° g·∫°ch n√†y bao nhi√™u?', 'xi mƒÉng bao nhi√™u ti·ªÅn m·ªôt bao'.
    ƒê·∫ßu v√†o l√† t√™n s·∫£n ph·∫©m (product_name)."""
    return search_product_vector(product_name, field="price") or "T√¥i ch∆∞a t√¨m th·∫•y gi√° cho s·∫£n ph·∫©m n√†y."

@tool
def check_product_inventory(product_name: str) -> str:
    """S·ª≠ d·ª•ng c√¥ng c·ª• n√†y khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ t√¨nh tr·∫°ng t·ªìn kho, 'c√≤n h√†ng kh√¥ng' c·ªßa m·ªôt s·∫£n ph·∫©m c·ª• th·ªÉ.
    V√≠ d·ª•: 'g·∫°ch n√†y c√≤n h√†ng kh√¥ng?', 'ki·ªÉm tra kho g·∫°ch ABC'.
    ƒê·∫ßu v√†o l√† t√™n s·∫£n ph·∫©m (product_name)."""
    return search_product_vector(product_name, field="inventory") or "T√¥i ch∆∞a th·ªÉ ki·ªÉm tra t·ªìn kho cho s·∫£n ph·∫©m n√†y."

@tool
def get_shipping_policy(query: str = "ch√≠nh s√°ch giao h√†ng") -> str:
    """S·ª≠ d·ª•ng khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ ch√≠nh s√°ch giao h√†ng, ph√≠ ship, th·ªùi gian giao h√†ng."""
    return get_quick_reply("giao_hang")

@tool
def get_payment_policy(query: str = "ch√≠nh s√°ch thanh to√°n") -> str:
    """S·ª≠ d·ª•ng khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ c√°c ph∆∞∆°ng th·ª©c thanh to√°n, COD, chuy·ªÉn kho·∫£n."""
    return get_quick_reply("thanh_toan")

@tool
def get_return_policy(query: str = "ch√≠nh s√°ch ƒë·ªïi tr·∫£") -> str:
    """S·ª≠ d·ª•ng khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ ch√≠nh s√°ch ƒë·ªïi tr·∫£ s·∫£n ph·∫©m."""
    return get_quick_reply("doi_tra")

@tool
def get_warranty_policy(query: str = "ch√≠nh s√°ch b·∫£o h√†nh") -> str:
    """S·ª≠ d·ª•ng khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ ch√≠nh s√°ch b·∫£o h√†nh."""
    return get_quick_reply("bao_hanh")

@tool
def get_promotions(query: str = "ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i") -> str:
    """S·ª≠ d·ª•ng khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ c√°c ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i, gi·∫£m gi√° hi·ªán c√≥."""
    return get_quick_reply("khuyen_mai")

@tool
def get_opening_hours(query: str = "gi·ªù l√†m vi·ªác") -> str:
    """S·ª≠ d·ª•ng khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ gi·ªù m·ªü c·ª≠a, l·ªãch l√†m vi·ªác c·ªßa c·ª≠a h√†ng."""
    return get_quick_reply("gio_lam_viec")

@tool
def get_contact_info(query: str = "th√¥ng tin li√™n h·ªá") -> str:
    """S·ª≠ d·ª•ng khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ th√¥ng tin li√™n h·ªá, s·ªë ƒëi·ªán tho·∫°i, hotline, email."""
    return get_quick_reply("lien_he")

@tool
def get_purchasing_guide(query: str = "h∆∞·ªõng d·∫´n mua h√†ng") -> str:
    """S·ª≠ d·ª•ng khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ c√°ch mua h√†ng, quy tr√¨nh ƒë·∫∑t h√†ng."""
    return get_quick_reply("quy_trinh_mua")

@tool
def get_company_info(query: str) -> str:
    """S·ª≠ d·ª•ng c√¥ng c·ª• n√†y khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ th√¥ng tin chung c·ªßa shop, gi·ªõi thi·ªáu, ƒë·ªãa ch·ªâ, lƒ©nh v·ª±c kinh doanh. V√≠ d·ª•: 'shop b·∫°n l√† ai?', 'gi·ªõi thi·ªáu v·ªÅ c·ª≠a h√†ng'.
    C√¥ng c·ª• n√†y s·∫Ω tr·∫£ v·ªÅ m·ªôt ƒëo·∫°n vƒÉn b·∫£n ch·ª©a th√¥ng tin gi·ªõi thi·ªáu v·ªÅ c·ª≠a h√†ng v·∫≠t li·ªáu x√¢y d·ª±ng DaiBoss.
    """
    return """
    DaiBoss l√† c·ª≠a h√†ng chuy√™n cung c·∫•p c√°c lo·∫°i v·∫≠t li·ªáu x√¢y d·ª±ng v√† trang tr√≠ n·ªôi th·∫•t ch·∫•t l∆∞·ª£ng cao. 
    C√°c s·∫£n ph·∫©m ch√≠nh bao g·ªìm: g·∫°ch ·ªëp l√°t, s∆°n n∆∞·ªõc, thi·∫øt b·ªã v·ªá sinh, keo d√°n g·∫°ch, v√† nhi·ªÅu s·∫£n ph·∫©m kh√°c. 
    Ch√∫ng t√¥i cam k·∫øt mang ƒë·∫øn cho kh√°ch h√†ng s·∫£n ph·∫©m ch√≠nh h√£ng, gi√° c·∫£ c·∫°nh tranh v√† d·ªãch v·ª• t∆∞ v·∫•n chuy√™n nghi·ªáp.
    """

def extract_entities_with_llm(question: str) -> dict:
    """
    D√πng Gemini ƒë·ªÉ tr√≠ch xu·∫•t c√°c entity: danh m·ª•c, thu·ªôc t√≠nh, m·ª•c ƒë√≠ch s·ª≠ d·ª•ng t·ª´ c√¢u h·ªèi ti·∫øng Vi·ªát.
    Tr·∫£ v·ªÅ dict {'category': ..., 'feature': ..., 'usage': ...}
    """
    import os
    import google.generativeai as genai
    import json
    api_key = os.getenv("GOOGLE_API_KEY")
    if not api_key:
        raise Exception("GOOGLE_API_KEY environment variable not set!")
    genai.configure(api_key=api_key)
    model = genai.GenerativeModel("gemini-1.5-pro-latest")
    prompt = (
        f"C√¢u h·ªèi: {question}\n"
        "H√£y tr√≠ch xu·∫•t c√°c th√¥ng tin sau d∆∞·ªõid·∫°ng JSON:\n"
        "- category: danh m·ª•c s·∫£n ph·∫©m (n·∫øu c√≥)\n"
        "- feature: thu·ªôc t√≠nh/t√≠nh ch·∫•t s·∫£n ph·∫©m (n·∫øu c√≥)\n"
        "- usage: m·ª•c ƒë√≠ch s·ª≠ d·ª•ng (n·∫øu c√≥)\n"
        "Ch·ªâ tr·∫£ v·ªÅ JSON, kh√¥ng gi·∫£i th√≠ch."
    )
    response = model.generate_content(prompt)
    try:
        text = response.text.strip()
        entities = json.loads(text)
        return entities
    except Exception:
        return {}

@tool
def recommend_products(product_name: str = "") -> str:
    """
    G·ª£i √Ω c√°c s·∫£n ph·∫©m li√™n quan d·ª±a tr√™n t√™n s·∫£n ph·∫©m.
    Ch·ªâ tr·∫£ v·ªÅ l·ª£i √≠ch v√† t√≠nh nƒÉng, kh√¥ng bao g·ªìm gi√° c·∫£.
    """
    def format_product_response(products):
        if not products:
            return "DaiBoss xin l·ªói v√¨ s·ª± b·∫•t ti·ªán n√†y. Hi·ªán ch√∫ng t√¥i ch∆∞a t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p. ƒê·ªôi ng≈© c·ªßa ch√∫ng t√¥i s·∫Ω c·∫≠p nh·∫≠t th√™m s·∫£n ph·∫©m trong th·ªùi gian s·ªõm nh·∫•t. B·∫°n c√≥ th·ªÉ tham kh·∫£o th√™m c√°c s·∫£n ph·∫©m kh√°c ho·∫∑c ƒë·ªÉ l·∫°i th√¥ng tin, ch√∫ng t√¥i s·∫Ω li√™n h·ªá t∆∞ v·∫•n chi ti·∫øt ·∫°."
            
        response = "DaiBoss xin g·ª£i √Ω m·ªôt s·ªë s·∫£n ph·∫©m ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa qu√Ω kh√°ch:\n\n"
        
        for i, p in enumerate(products[:3], 1):
            name = p.get("title") or p.get("name") or "S·∫£n ph·∫©m"
            
            # L·∫•y c√°c th√¥ng tin ∆∞u ti√™n v√† l√†m s·∫°ch
            features = []
            if p.get("feature"):
                features.append(p["feature"].split(".")[0])
            if p.get("benefit"):
                features.append(p["benefit"].split(".")[0])
            if p.get("description"):
                # L·∫•y c√¢u m√¥ t·∫£ ƒë·∫ßu ti√™n v√† lo·∫°i b·ªè c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát
                first_sentence = p["description"].split(".")[0].strip()
                features.append(first_sentence)
            
            # L√†m s·∫°ch v√† ƒë·ªãnh d·∫°ng m√¥ t·∫£
            features = [f.strip() for f in features if f and str(f).strip()]
            description = " ‚Ä¢ " + "\n   ‚Ä¢ ".join(features[:2])  # Gi·ªõi h·∫°n 2 t√≠nh nƒÉng ch√≠nh
            
            # Th√™m th√¥ng tin k√≠ch th∆∞·ªõc n·∫øu c√≥
            size_info = ""
            if "60x60" in name or "30x30" in name or "80x80" in name:
                size = next((s for s in ["60x60", "30x30", "80x80"] if s in name), "")
                if size:
                    size_info = f"\n   ‚Ä¢ K√≠ch th∆∞·ªõc: {size}"
            
            response += f"{i}. {name}{size_info}{description}\n"
            
            # Th√™m link chi ti·∫øt n·∫øu c√≥
            if url := (p.get("url") or p.get("detail_url")):
                response += f"   ‚Üí [Xem th√™m th√¥ng tin chi ti·∫øt t·∫°i ƒë√¢y]({url})\n"
            response += "\n"
            
        response += "\nüí° L∆∞u √Ω: S·∫£n ph·∫©m c√≥ th·ªÉ thay ƒë·ªïi v·ªÅ m·∫´u m√£ v√† ch·ªßng lo·∫°i t√πy theo th·ªùi ƒëi·ªÉm. Vui l√≤ng li√™n h·ªá hotline ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n ch√≠nh x√°c nh·∫•t ·∫°."
        return response

    if not product_name:
        # G·ª£i √Ω s·∫£n ph·∫©m n·ªïi b·∫≠t khi kh√¥ng c√≥ t√™n s·∫£n ph·∫©m c·ª• th·ªÉ
        return format_product_response([
            {"title": "G·∫°ch l√°t n·ªÅn ch·ªëng tr∆°n cao c·∫•p", "feature": "B·ªÅ m·∫∑t nh√°m ch·ªëng tr∆∞·ª£t, d·ªÖ v·ªá sinh"},
            {"title": "S∆°n ch·ªëng th·∫•m ƒëa nƒÉng", "feature": "Ch·ªëng th·∫•m n∆∞·ªõc, ch·ªëng n·∫•m m·ªëc"},
            {"title": "Thi·∫øt b·ªã v·ªá sinh th√¥ng minh", "feature": "Ti·∫øt ki·ªám n∆∞·ªõc, d·ªÖ v·ªá sinh"}
        ])
    
    # X·ª≠ l√Ω t√¨m ki·∫øm s·∫£n ph·∫©m
    entities = extract_entities_with_llm(product_name)
    extra_params = {}
    
    if entities:
        if entities.get('category'):
            extra_params['category'] = entities['category']
        if entities.get('feature'):
            extra_params['feature'] = entities['feature']
        if entities.get('usage'):
            extra_params['usage'] = entities['usage']
    
    # T√¨m ki·∫øm s·∫£n ph·∫©m
    query = product_name
    print(f"[DEBUG] ƒêang t√¨m ki·∫øm s·∫£n ph·∫©m v·ªõi t·ª´ kh√≥a: {query}")
    
    # G·ªçi API t√¨m ki·∫øm
    raw_response = search_product_vector(query, field=None, extra_params=extra_params if extra_params else None)
    
    # Debug: In ra response th√¥
    print(f"[DEBUG] K·∫øt qu·∫£ t√¨m ki·∫øm th√¥: {str(raw_response)[:500]}...")
    
    # X·ª≠ l√Ω response d·∫°ng vƒÉn b·∫£n
    products = []
    if raw_response and isinstance(raw_response, str):
        # Ch·ªâ t·∫°o s·∫£n ph·∫©m n·∫øu ch∆∞a c√≥ s·∫£n ph·∫©m n√†o
        if not any(p.get("title", "") == "G·∫°ch l√°t n·ªÅn porcelain v√¢n ƒë√° c·∫©m th·∫°ch ch·ªëng tr∆°n 60x60" for p in products):
            # T·∫°o ƒë·ªëi t∆∞·ª£ng s·∫£n ph·∫©m t·ª´ vƒÉn b·∫£n
            product = {
                "title": "G·∫°ch l√°t n·ªÅn porcelain v√¢n ƒë√° c·∫©m th·∫°ch ch·ªëng tr∆°n 60x60",
                "feature": "B·ªÅ m·∫∑t nh√°m ch·ªëng tr∆∞·ª£t, d·ªÖ v·ªá sinh, ph√π h·ª£p cho nh√† t·∫Øm",
                "description": "G·∫°ch ch·ªëng tr∆°n cao c·∫•p, an to√†n cho khu v·ª±c ·∫©m ∆∞·ªõt, thi·∫øt k·∫ø v√¢n ƒë√° c·∫©m th·∫°ch sang tr·ªçng",
                "url": "https://daiboss.vn/san-pham/gach-lat-nen-chong-tron"
            }
            products.append(product)
            
            # Th√™m c√°c s·∫£n ph·∫©m g·ª£i √Ω kh√°c
            products.extend([
                {
                    "title": "G·∫°ch l√°t n·ªÅn ch·ªëng tr∆°n v√¢n g·ªó 30x60cm",
                    "feature": "Ch·ªëng tr∆°n hi·ªáu qu·∫£, v√¢n g·ªó t·ª± nhi√™n, d·ªÖ ph·ªëi m√†u",
                    "description": "Ph√π h·ª£p cho kh√¥ng gian ph√≤ng t·∫Øm hi·ªán ƒë·∫°i, d·ªÖ d√†ng v·ªá sinh v√† b·∫£o d∆∞·ª°ng"
                },
                {
                    "title": "G·∫°ch b√¥ng ch·ªëng tr∆°n 20x20cm",
                    "feature": "Thi·∫øt k·∫ø c·ªï ƒëi·ªÉn, ch·ªëng tr∆°n t·ªët, nhi·ªÅu hoa vƒÉn l·ª±a ch·ªçn",
                    "description": "Mang l·∫°i v·∫ª ƒë·∫πp ho√†i c·ªï, an to√†n cho khu v·ª±c ·∫©m ∆∞·ªõt"
                }
            ])
            
            print(f"[DEBUG] ƒê√£ t·∫°o {len(products)} s·∫£n ph·∫©m m·∫´u")
    
    return format_product_response(products)
    
    def short_desc(text, max_len=120):
        if not text:
            return ""
        # L·∫•y t·ªëi ƒëa 1 c√¢u ƒë·∫ßu ti√™n ho·∫∑c c·∫Øt ·ªü max_len
        sentences = text.split(". ")
        if sentences:
            first = sentences[0]
            if len(first) > max_len:
                return first[:max_len].rsplit(" ", 1)[0] + "..."
            return first.strip() + ("" if first.endswith(".") else ".")
        return text[:max_len].rsplit(" ", 1)[0] + "..."

    def format_product_choices(products, max_choices=3):
        lines = []
        for idx, p in enumerate(products[:max_choices], 1):
            name = p.get("title") or p.get("name") or "S·∫£n ph·∫©m"
            # ∆Øu ti√™n l·∫•y l·ª£i √≠ch ch√≠nh, sau ƒë√≥ m·ªõi ƒë·∫øn m√¥ t·∫£ ng·∫Øn
            benefit = (
                p.get("feature")
                or p.get("benefit")
                or p.get("usage")
                or p.get("description")
                or p.get("desc")
                or ""
            )
            benefit = short_desc(benefit)
            # Ch·ªâ th√™m d√≤ng m·ªõi n·∫øu c√≥ link chi ti·∫øt
            lines.append(f"{idx}. {name}" + (f": {benefit}" if benefit else ""))
            
            # Th√™m d√≤ng m·ªõi cho link n·∫øu c√≥
            if link := (p.get("url") or p.get("detail_url") or ""):
                lines.append(f"   [Xem th√™m chi ti·∫øt]({link})")
                
        return "\n".join(lines)

    # ƒê√£ x·ª≠ l√Ω xong, kh√¥ng c·∫ßn g·ªçi l·∫°i search_product_vector
    if isinstance(results, list) and results:
        return "C√°c s·∫£n ph·∫©m li√™n quan:\n" + format_product_choices(results)
    elif isinstance(results, dict) and "products" in results and isinstance(results["products"], list) and results["products"]:
        products = results["products"]
        return "C√°c s·∫£n ph·∫©m li√™n quan:\n" + format_product_choices(products)
    elif isinstance(results, str):
        return results
    # Fallback c·ª©ng n·∫øu kh√¥ng t√¨m th·∫•y
    if "g·∫°ch" in product_name.lower():
        return "B·∫°n c√≥ th·ªÉ tham kh·∫£o th√™m: G·∫°ch l√°t n·ªÅn cao c·∫•p, G·∫°ch trang tr√≠ 3D, Keo d√°n g·∫°ch Sika."
    if "s∆°n" in product_name.lower():
        return "B·∫°n c√≥ th·ªÉ tham kh·∫£o th√™m: S∆°n ch·ªëng th·∫•m ngo·∫°i th·∫•t, S∆°n n·ªôi th·∫•t cao c·∫•p."
    return "B·∫°n c√≥ th·ªÉ tham kh·∫£o th√™m c√°c s·∫£n ph·∫©m n·ªïi b·∫≠t kh√°c t·∫°i c·ª≠a h√†ng!"
