# üìÅ File: modules/chatbot.py

import os
from dotenv import load_dotenv

from modules.agent import agent_executor
from modules.langchain_timing_callback import TimingCallbackHandler

# Bi·∫øn to√†n c·ª•c ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i kh·ªüi t·∫°o
is_initialized = False

def init_chatbot():
    """
    Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt cho chatbot ho·∫°t ƒë·ªông.
    Trong ki·∫øn tr√∫c Agent, vi·ªác n√†y ch·ªß y·∫øu l√† load bi·∫øn m√¥i tr∆∞·ªùng
    v√† kh·ªüi t·∫°o Vector Store cho c√°c c√¥ng c·ª• s·ª≠ d·ª•ng.
    Agent v√† LLM s·∫Ω ƒë∆∞·ª£c kh·ªüi t·∫°o lazy khi c·∫ßn.
    """
    global is_initialized
    if is_initialized:
        print("ü§ñ Chatbot ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o tr∆∞·ªõc ƒë√≥.")
        return

    print("üî• Kh·ªüi t·∫°o h·ªá th·ªëng Chatbot Agent...")
    
    # 1. Load bi·∫øn m√¥i tr∆∞·ªùng (quan tr·ªçng nh·∫•t l√† GOOGLE_API_KEY)
    load_dotenv()
    api_key = os.getenv("GOOGLE_API_KEY")
    if not api_key:
        print("‚ùå L·ªñI: GOOGLE_API_KEY kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y. Vui l√≤ng ki·ªÉm tra file .env")
        is_initialized = False
        return
    print("‚úÖ Bi·∫øn m√¥i tr∆∞·ªùng ƒë√£ ƒë∆∞·ª£c t·∫£i.")

    # Vector Store kh√¥ng c·∫ßn kh·ªüi t·∫°o ·ªü ƒë√¢y n·ªØa.
    # C√°c tools s·∫Ω t·ª± truy c·∫≠p API ho·∫∑c ngu·ªìn d·ªØ li·ªáu khi c·∫ßn.

    is_initialized = True
    print("üéâ Chatbot Agent ƒë√£ s·∫µn s√†ng!")


def ask_question(question: str, session_id: str):
    global context_mgr
    """
    H√†m x·ª≠ l√Ω c√¢u h·ªèi ch√≠nh.
    Chuy·ªÉn ti·∫øp c√¢u h·ªèi tr·ª±c ti·∫øp ƒë·∫øn AI Agent ƒë·ªÉ x·ª≠ l√Ω.
    """
    if not is_initialized:
        return {
            "answer": "Xin l·ªói, h·ªá th·ªëng ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng. Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u h√¨nh.",
            "type": "error_not_initialized"
        }
    # ƒê·∫£m b·∫£o context_mgr lu√¥n t·ªìn t·∫°i tr∆∞·ªõc khi x·ª≠ l√Ω
    if 'context_mgr' not in globals() or context_mgr is None or getattr(context_mgr, 'session_id', None) != session_id:
        from modules.context_manager import SmartContextManager
        from modules.agent import llm
        context_mgr = SmartContextManager(session_id, llm)

    # X·ª≠ l√Ω greeting SI√äU NHANH (kh√¥ng qua agent)
    from modules.intent_service import classify_intent
    from modules.entity_linking import resolve_product_reference
    import re
    q_lower = question.lower().strip()

    # 1. Ph√¢n lo·∫°i intent b·∫±ng service
    intent, matched_kw = classify_intent(question)

    # 2. N·∫øu greeting
    if intent == "greeting":
        answer = "Xin ch√†o b·∫°n üëã T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa DaiBoss. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ h√¥m nay?"
        context_mgr.remember(intent="greeting", question=question, bot_message=answer)
        context_mgr.update_summary()
        return {"answer": answer, "type": "greeting"}

    # 3. N·∫øu intent x√°c nh·∫≠n nhanh
    if intent == "confirm":
        last_ctx = context_mgr.recall() if hasattr(context_mgr, 'recall') else {}
        last_intent = last_ctx.get('last_intent') if last_ctx else None
        last_product = last_ctx.get('last_product') if last_ctx else None
        if last_intent in ["inventory_query", "product_price", "product_info"] and last_product:
            from modules.tools import check_product_inventory, get_product_price, get_product_info
            if last_intent == "inventory_query":
                answer = check_product_inventory(last_product)
            elif last_intent == "product_price":
                answer = get_product_price(last_product)
            elif last_intent == "product_info":
                answer = get_product_info(last_product)
            else:
                answer = f"T√¥i ƒë√£ ghi nh·∫≠n x√°c nh·∫≠n c·ªßa b·∫°n v·ªÅ s·∫£n ph·∫©m: {last_product}. B·∫°n c·∫ßn h·ªèi g√¨ th√™m kh√¥ng?"
            context_mgr.remember(intent=last_intent, question=question, bot_message=answer, product=last_product)
            context_mgr.update_summary()
            return {"answer": answer, "type": last_intent or "confirmation"}
        else:
            answer = "B·∫°n x√°c nh·∫≠n ƒë√∫ng r·ªìi, vui l√≤ng n√≥i r√µ h∆°n b·∫°n mu·ªën h·ªèi v·ªÅ s·∫£n ph·∫©m ho·∫∑c v·∫•n ƒë·ªÅ g√¨ nh√©."
            context_mgr.remember(intent="confirmation", question=question, bot_message=answer)
            context_mgr.update_summary()
            return {"answer": answer, "type": "confirmation"}

    # 4. N·∫øu intent li√™n quan s·∫£n ph·∫©m (inventory_query, product_price, product_info...)
    if intent in ["inventory_query", "product_price", "product_info"]:
        prod_name = None
        product_info = None
        # 4.1. Th·ª≠ resolve entity tham chi·∫øu qua service
        print("[DEBUG] ENTITY LINKING INPUT:", question, "| product_history:", context_mgr.product_history)
        ref_product = resolve_product_reference(question, context_mgr.product_history)
        print("[DEBUG] ENTITY LINKING OUTPUT:", ref_product)
        if ref_product:
            prod_name = ref_product.get('name')
            product_info = ref_product.get('product_info')
        else:
            print("[DEBUG] Kh√¥ng resolve ƒë∆∞·ª£c entity tham chi·∫øu t·ª´ c√¢u h·ªèi n√†y!")
        # 4.2. N·∫øu kh√¥ng, extract t√™n s·∫£n ph·∫©m t·ª´ c√¢u h·ªèi (∆∞u ti√™n d√πng extract_entities n·∫øu kh√¥ng match t·ª´ kh√≥a c·ª©ng)
        if not prod_name:
            for t in ["g·∫°ch", "xi mƒÉng", "s·∫Øt", "s∆°n", "keo", "thi·∫øt b·ªã", "lavabo", "b·ªìn c·∫ßu", "g·∫°ch terrazzo", "kt", "y6503_s"]:
                if t in q_lower:
                    prod_name = question
                    break
        if not prod_name:
            try:
                from modules.entities import extract_entities
                ents = extract_entities(question)
                if 'product' in ents and ents['product']:
                    prod_name = ents['product'][0]
            except Exception as e:
                print("[DEBUG] extract_entities error:", e)
        # 4.3. N·∫øu v·∫´n kh√¥ng c√≥, l·∫•y s·∫£n ph·∫©m g·∫ßn nh·∫•t
        if not prod_name:
            last_product = context_mgr.get_last_product()
            if last_product:
                prod_name = last_product.get('name')
                product_info = last_product.get('product_info')
        # 4.4. N·∫øu v·∫´n kh√¥ng c√≥, h·ªèi l·∫°i user
        if not prod_name:
            print("[DEBUG] Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c prod_name. product_history:", context_mgr.product_history)
            answer = "D·∫° xin l·ªói qu√Ω kh√°ch, t√¥i ch∆∞a r√µ qu√Ω kh√°ch mu·ªën ki·ªÉm tra s·∫£n ph·∫©m n√†o. Vui l√≤ng cho t√¥i bi·∫øt t√™n s·∫£n ph·∫©m ·∫°."
            context_mgr.remember(intent=intent, question=question, bot_message=answer)
            context_mgr.update_summary()
            return {"answer": answer, "type": intent}
        # 4.5. N·∫øu ƒë√£ c√≥ product_info th√¨ kh√¥ng c·∫ßn g·ªçi l·∫°i API, c√≤n kh√¥ng th√¨ l·∫•y m·ªõi
        if not product_info:
            from modules.tools import get_product_info
            product_info = get_product_info(prod_name)
        # Lu√¥n l∆∞u v√†o product_history ƒë·ªÉ tracking multi-turn, ∆∞u ti√™n l·∫•y title t·ª´ API, n·∫øu kh√¥ng c√≥ th√¨ l·∫•y t√™n s·∫£n ph·∫©m t·ª´ c√¢u h·ªèi user
        def extract_title_from_api_response(api_response):
            import json
            if not api_response:
                return None
            try:
                if isinstance(api_response, str):
                    data = json.loads(api_response)
                else:
                    data = api_response
                # ∆Øu ti√™n match_type=exact
                if isinstance(data, dict) and data.get("products"):
                    if data.get("match_type") == "exact" and len(data["products"]) == 1:
                        return data["products"][0].get("title")
                    # fallback: l·∫•y title ƒë·∫ßu ti√™n
                    return data["products"][0].get("title")
            except Exception as e:
                print("[DEBUG] extract_title_from_api_response error:", e)
            return None

        api_title = extract_title_from_api_response(product_info)
        if api_title:
            save_name = api_title
            product_source = "api"
        else:
            # N·∫øu kh√¥ng c√≥ title t·ª´ API, lu√¥n l∆∞u ƒë√∫ng gi√° tr·ªã truy·ªÅn v√†o bi·∫øn prod_name (t·ª©c l√† params['q'] khi g·ªçi API)
            save_name = prod_name
            product_source = "user_query"
        context_mgr.remember(intent=intent, question=question, bot_message=None, product=save_name, product_info=product_info, product_source=product_source)
        context_mgr.update_summary()

        # G·ªçi tool ph√π h·ª£p v√† tr·∫£ l·ªùi chuy√™n nghi·ªáp, h·∫•p d·∫´n, c√° nh√¢n h√≥a
        user_name = "qu√Ω kh√°ch"  # C√≥ th·ªÉ l·∫•y t·ª´ session n·∫øu mu·ªën c√° nh√¢n h√≥a h∆°n
        if intent == "inventory_query":
            from modules.tools import check_product_inventory
            inventory = check_product_inventory(prod_name)
            answer = f"{user_name} th√¢n m·∫øn, s·∫£n ph·∫©m {prod_name} hi·ªán c√≤n {inventory} trong kho. B·∫°n mu·ªën ƒë·∫∑t mua s·ªë l∆∞·ª£ng bao nhi√™u, hay c·∫ßn t∆∞ v·∫•n th√™m v·ªÅ ∆∞u ƒë√£i, v·∫≠n chuy·ªÉn kh√¥ng ·∫°? DaiBoss lu√¥n s·∫µn s√†ng h·ªó tr·ª£!"
        elif intent == "product_price":
            from modules.tools import get_product_price
            price = get_product_price(prod_name)
            answer = f"Gi√° b√°n ∆∞u ƒë√£i c·ªßa s·∫£n ph·∫©m hi·ªán t·∫°i l√† {price} VNƒê. S·∫£n ph·∫©m n√†y ƒëang ƒë∆∞·ª£c nhi·ªÅu kh√°ch h√†ng l·ª±a ch·ªçn t·∫°i DaiBoss! B·∫°n c√≥ mu·ªën nh·∫≠n b√°o gi√° chi ti·∫øt, ƒë·∫∑t h√†ng ngay ho·∫∑c t∆∞ v·∫•n th√™m v·ªÅ ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i kh√¥ng ·∫°?"
        elif intent == "product_info":
            from modules.tools import get_product_info
            info = get_product_info(prod_name)
            answer = f"D∆∞·ªõi ƒë√¢y l√† th√¥ng tin chi ti·∫øt v·ªÅ {prod_name}: {info} N·∫øu {user_name} c·∫ßn bi·∫øt th√™m v·ªÅ gi√°, t·ªìn kho ho·∫∑c ch√≠nh s√°ch giao h√†ng, h√£y nh·∫Øn cho DaiBoss nh√©!"
        else:
            answer = "Xin l·ªói, t√¥i ch∆∞a h·ªó tr·ª£ intent n√†y."
        # Lu√¥n l∆∞u ƒë√∫ng s·∫£n ph·∫©m v·ª´a h·ªèi v√†o history, kh√¥ng ghi ƒë√® nh·∫ßm s·∫£n ph·∫©m tr∆∞·ªõc
        context_mgr.remember(intent=intent, question=question, bot_message=answer, product=prod_name, product_info=product_info)
        context_mgr.update_summary()
        return {"answer": answer, "type": intent}
    # fallback
    # N·∫øu kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c intent, chuy·ªÉn sang agent reasoning ho·∫∑c fallback chuy√™n nghi·ªáp

    import pprint
    try:
        print(f"\n{'='*20} NEW USER QUESTION {'='*20}")
        print(f"[USER QUESTION]: {question}")
        # S·ª≠ d·ª•ng agent_executor ƒë√£ c√≥ memory ƒë·ªÉ x·ª≠ l√Ω
        # session_id s·∫Ω ƒë∆∞·ª£c d√πng ƒë·ªÉ qu·∫£n l√Ω memory sau n√†y
        callback = TimingCallbackHandler()
        # Ch·ªâ truy·ªÅn 3-5 l∆∞·ª£t chat g·∫ßn nh·∫•t v√†o chat_history ƒë·ªÉ agent x·ª≠ l√Ω nhanh h∆°n
        # N·∫øu context_mgr c√≥ h√†m l·∫•y l·ªãch s·ª≠ ng·∫Øn, h√£y s·ª≠ d·ª•ng
        chat_hist = None
        if hasattr(context_mgr, 'memory') and hasattr(context_mgr.memory, 'buffer'):
            # L·∫•y 3-7 l∆∞·ª£t chat g·∫ßn nh·∫•t (n·∫øu c√≥)
            if isinstance(context_mgr.memory.buffer, list):
                chat_hist = context_mgr.memory.buffer[-7:]
            else:
                chat_hist = context_mgr.memory.buffer

        # G·ªçi agent_executor ƒë·ªÉ x·ª≠ l√Ω c√¢u h·ªèi
        response = agent_executor.invoke(
            {"input": question, "chat_history": chat_hist},
            config={"configurable": {"session_id": session_id}},
            callbacks=[callback]
        )

        # X·ª≠ l√Ω k·∫øt qu·∫£ t·ª´ agent
        answer = response.get("output", "Xin l·ªói, t√¥i ch∆∞a c√≥ c√¢u tr·∫£ l·ªùi cho v·∫•n ƒë·ªÅ n√†y.")
        
        # Log reasoning s√¢u t·ª´ng b∆∞·ªõc & l∆∞u structured product_info n·∫øu c√≥
        last_product_info = None
        last_product_name = None
        
        # X·ª≠ l√Ω intermediate steps n·∫øu c√≥
        if 'intermediate_steps' in response and response['intermediate_steps']:
            print("[AGENT REASONING STEPS]:")
            for idx, step in enumerate(response['intermediate_steps']):
                action, observation = step
                print(f"  Step {idx+1}:")
                print(f"    [Action]: {action}")
                print(f"    [Observation]: {observation}")
                
                # X·ª≠ l√Ω observation ƒë·ªÉ tr√≠ch xu·∫•t th√¥ng tin s·∫£n ph·∫©m
                try:
                    obs_data = observation
                    if isinstance(observation, str):
                        import json
                        if '{' in observation and '}' in observation:
                            obs_data = json.loads(observation)
                    
                    # N·∫øu observation ch·ª©a th√¥ng tin s·∫£n ph·∫©m
                    if isinstance(obs_data, dict):
                        if obs_data.get('title'):
                            last_product_info = obs_data
                            last_product_name = obs_data['title']
                        # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p c√≥ products array
                        elif obs_data.get('products') and isinstance(obs_data['products'], list) and len(obs_data['products']) > 0:
                            last_product_info = obs_data['products'][0]
                            last_product_name = obs_data['products'][0].get('title')
                except Exception as e:
                    print(f"[DEBUG] L·ªói khi x·ª≠ l√Ω observation: {e}")

        # Log agent scratchpad n·∫øu c√≥
        if 'agent_scratchpad' in response and response['agent_scratchpad']:
            print("[AGENT SCRATCHPAD]:")
            print(response['agent_scratchpad'])

        # L∆∞u th√¥ng tin s·∫£n ph·∫©m n·∫øu c√≥
        if last_product_info and last_product_name:
            context_mgr.remember(
                intent="product_info", 
                question=question, 
                bot_message=answer, 
                product=last_product_name, 
                product_info=last_product_info
            )
        else:
            # N·∫øu kh√¥ng c√≥ th√¥ng tin s·∫£n ph·∫©m, v·∫´n l∆∞u l·ªãch s·ª≠
            context_mgr.remember(
                intent=intent or "unknown",
                question=question,
                bot_message=answer,
                product=question  # S·ª≠ d·ª•ng c√¢u h·ªèi l√†m t√™n s·∫£n ph·∫©m t·∫°m th·ªùi
            )
        context_mgr.update_summary()

        # X·ª≠ l√Ω g·ª£i √Ω s·∫£n ph·∫©m n·∫øu l√† intent product_suggestion
        if intent == "product_suggestion":
            print(f"[DEBUG] X·ª≠ l√Ω ri√™ng cho product_suggestion")
            try:
                from modules.tools import recommend_products
                suggestions = recommend_products(question)
                return {
                    "answer": suggestions, 
                    "type": "product_suggestion"
                }
            except Exception as e:
                print(f"[DEBUG] recommend_products error: {e}")
                return {
                    "answer": "B·∫°n c√≥ th·ªÉ tham kh·∫£o th√™m c√°c s·∫£n ph·∫©m n·ªïi b·∫≠t kh√°c t·∫°i c·ª≠a h√†ng!",
                    "type": "product_suggestion"
                }

        # Tr·∫£ v·ªÅ k·∫øt qu·∫£ b√¨nh th∆∞·ªùng n·∫øu kh√¥ng ph·∫£i product_suggestion
        return {
            "answer": answer,
            "type": "agent_based"
        }

    except Exception as e:
        print(f"‚ùå L·ªói trong qu√° tr√¨nh Agent th·ª±c thi: {e}")
        return {
            "answer": "Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω. Vui l√≤ng th·ª≠ l·∫°i sau.",
            "type": "error_agent_execution"
        }
    # Fallback
    fallback = "Xin l·ªói, t√¥i ch∆∞a r√µ √Ω b·∫°n h·ªèi. T√¥i l√† tr·ª£ l√Ω ·∫£o chuy√™n t∆∞ v·∫•n s·∫£n ph·∫©m v√† d·ªãch v·ª• c·ªßa DaiBoss. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ s·∫£n ph·∫©m, gi√°, ch√≠nh s√°ch ƒë·ªïi tr·∫£, b·∫£o h√†nh, giao h√†ng, ho·∫∑c c√°c ∆∞u ƒë√£i hi·ªán c√≥."
    context_mgr.remember(intent="khac", question=question, bot_message=fallback)
    context_mgr.update_summary()
    return {"answer": fallback, "type": "fallback_ai"}