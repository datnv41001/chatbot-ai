# üìÅ File: modules/chatbot.py

import os
from dotenv import load_dotenv

from modules.agent import agent_executor

# Bi·∫øn to√†n c·ª•c ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i kh·ªüi t·∫°o
is_initialized = False

def init_chatbot():
    """
    Kh·ªüi t·∫°o c√°c th√†nh ph·∫ßn c·∫ßn thi·∫øt cho chatbot ho·∫°t ƒë·ªông.
    Trong ki·∫øn tr√∫c Agent, vi·ªác n√†y ch·ªß y·∫øu l√† load bi·∫øn m√¥i tr∆∞·ªùng
    v√† kh·ªüi t·∫°o Vector Store cho c√°c c√¥ng c·ª• s·ª≠ d·ª•ng.
    Agent v√† LLM s·∫Ω ƒë∆∞·ª£c kh·ªüi t·∫°o lazy khi c·∫ßn.
    """
    global is_initialized
    if is_initialized:
        print("ü§ñ Chatbot ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o tr∆∞·ªõc ƒë√≥.")
        return

    print("üî• Kh·ªüi t·∫°o h·ªá th·ªëng Chatbot Agent...")
    
    # 1. Load bi·∫øn m√¥i tr∆∞·ªùng (quan tr·ªçng nh·∫•t l√† GOOGLE_API_KEY)
    load_dotenv()
    api_key = os.getenv("GOOGLE_API_KEY")
    if not api_key:
        print("‚ùå L·ªñI: GOOGLE_API_KEY kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y. Vui l√≤ng ki·ªÉm tra file .env")
        is_initialized = False
        return
    print("‚úÖ Bi·∫øn m√¥i tr∆∞·ªùng ƒë√£ ƒë∆∞·ª£c t·∫£i.")

    # Vector Store kh√¥ng c·∫ßn kh·ªüi t·∫°o ·ªü ƒë√¢y n·ªØa.
    # C√°c tools s·∫Ω t·ª± truy c·∫≠p API ho·∫∑c ngu·ªìn d·ªØ li·ªáu khi c·∫ßn.

    is_initialized = True
    print("üéâ Chatbot Agent ƒë√£ s·∫µn s√†ng!")


def ask_question(question: str, session_id: str):
    """
    H√†m x·ª≠ l√Ω c√¢u h·ªèi ch√≠nh.
    Chuy·ªÉn ti·∫øp c√¢u h·ªèi tr·ª±c ti·∫øp ƒë·∫øn AI Agent ƒë·ªÉ x·ª≠ l√Ω.
    """
    if not is_initialized:
        return {
            "answer": "Xin l·ªói, h·ªá th·ªëng ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng. Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u h√¨nh.",
            "type": "error_not_initialized"
        }
    
    try:
        # S·ª≠ d·ª•ng agent_executor ƒë√£ c√≥ memory ƒë·ªÉ x·ª≠ l√Ω
        # session_id s·∫Ω ƒë∆∞·ª£c d√πng ƒë·ªÉ qu·∫£n l√Ω memory sau n√†y
        response = agent_executor.invoke(
            {"input": question},
            config={"configurable": {"session_id": session_id}}
        )
        answer = response.get("output", "Xin l·ªói, t√¥i ch∆∞a c√≥ c√¢u tr·∫£ l·ªùi cho v·∫•n ƒë·ªÅ n√†y.")
        return {"answer": answer, "type": "agent_based"}
    except Exception as e:
        print(f"‚ùå L·ªói trong qu√° tr√¨nh Agent th·ª±c thi: {e}")
        return {
            "answer": "Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω. Vui l√≤ng th·ª≠ l·∫°i sau.",
            "type": "error_agent_execution"
        }
        context_mgr.update_summary()
        return {"answer": answer, "type": "about_bot"}
    if any(kw in q_lower for kw in ["xin ch√†o", "hello", "hi"]):
        answer = "Xin ch√†o b·∫°n üëã T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa DaiBoss. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ h√¥m nay?"
        context_mgr.remember(intent="greeting", question=question, bot_message=answer)
        context_mgr.update_summary()
        return {"answer": answer, "type": "greeting"}

    fallback = "Xin l·ªói, t√¥i ch∆∞a r√µ √Ω b·∫°n h·ªèi. T√¥i l√† tr·ª£ l√Ω ·∫£o chuy√™n t∆∞ v·∫•n s·∫£n ph·∫©m v√† d·ªãch v·ª• c·ªßa DaiBoss. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ s·∫£n ph·∫©m, gi√°, ch√≠nh s√°ch ƒë·ªïi tr·∫£, b·∫£o h√†nh, giao h√†ng, ho·∫∑c c√°c ∆∞u ƒë√£i hi·ªán c√≥."
    context_mgr.remember(intent="khac", question=question, bot_message=fallback)
    context_mgr.update_summary()
    return {"answer": fallback, "type": "fallback_ai"}