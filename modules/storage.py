from sqlmodel import Session, select
from modules.models import engine, User, ChatHistory, ConversationSummary
from datetime import datetime
import json

# üßë‚Äçüíº H√†m l∆∞u ng∆∞·ªùi d√πng n·∫øu ch∆∞a t·ªìn t·∫°i
def save_user_if_not_exist(user_id, username, email):
    """
    Ki·ªÉm tra xem user ƒë√£ t·ªìn t·∫°i trong database ch∆∞a.
    N·∫øu ch∆∞a c√≥ ‚Üí l∆∞u m·ªõi user v√†o b·∫£ng User.
    """
    with Session(engine) as session:
        user = session.exec(
            select(User).where(User.id == user_id)
        ).first()
        if not user:
            session.add(User(id=user_id, username=username, email=email))
            session.commit()


# üí¨ H√†m l∆∞u l·∫°i 1 l·∫ßn chat
def save_chat(user_id, question, answer, type="text"):
    """
    L∆∞u 1 ƒëo·∫°n h·ªôi tho·∫°i gi·ªØa ng∆∞·ªùi d√πng v√† chatbot v√†o b·∫£ng ChatHistory.
    """
    with Session(engine) as session:
        session.add(ChatHistory(
            user_id=user_id,
            question=question,
            answer=answer,
            type=type,  # "quick_reply" ho·∫∑c "rag"
            timestamp=datetime.utcnow()
        ))
        session.commit()


# üìú H√†m truy xu·∫•t l·ªãch s·ª≠ h·ªôi tho·∫°i
def get_chat_history(user_id):
    """
    Tr·∫£ v·ªÅ danh s√°ch c√°c l·∫ßn h·ªôi tho·∫°i c·ªßa user theo ƒë√∫ng th·ª© t·ª± th·ªùi gian.
    D√πng trong API /history/{user_id}.
    """
    from modules.models import ChatHistory  # ‚úÖ ƒë·ªÉ tr√°nh l·ªói v√≤ng l·∫∑p import
    with Session(engine) as session:
        results = session.exec(
            select(ChatHistory)
            .where(ChatHistory.user_id == user_id)
            .order_by(ChatHistory.timestamp)
        ).all()

        return [
            {
                "question": r.question,
                "answer": r.answer,
                "type": r.type,
                "timestamp": str(r.timestamp)
            }
            for r in results
        ]


# üìÇ Ghi ho·∫∑c c·∫≠p nh·∫≠t b·∫£n t√≥m t·∫Øt h·ªôi tho·∫°i v√†o DB
def save_summary_to_db(session_id, summary):
    summary_str = json.dumps(summary, ensure_ascii=False)  # ‚úîÔ∏è Serialize list to string
    with Session(engine) as session:
        existing = session.exec(
            select(ConversationSummary).where(ConversationSummary.session_id == session_id)
        ).first()
        if existing:
            existing.summary = summary_str
            existing.updated_at = datetime.utcnow()  # ‚è±Ô∏è C·∫≠p nh·∫≠t th·ªùi gian
        else:
            session.add(ConversationSummary(session_id=session_id, summary=summary_str))
        session.commit()


# üîç Truy v·∫•n DB ƒë·ªÉ l·∫•y summary n·∫øu c√≥
def load_summary_from_db(session_id):
    with Session(engine) as session:
        summary = session.exec(
            select(ConversationSummary).where(ConversationSummary.session_id == session_id)
        ).first()
        return json.loads(summary.summary) if summary else None